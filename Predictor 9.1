timestamp,crash_point
2024-01-01 12:00,1.25
2024-01-01 12:01,2.50
2024-01-01 12:02,1.75
# Importing libraries
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import streamlit as st

# Load the data
@st.cache_data  # Cache to avoid reloading every time
def load_data():
    df = pd.read_csv('aviator_data.csv')  # Ensure the CSV is in your working directory
    return df

# Feature Engineering
def prepare_data(df):
    df['previous_crash'] = df['crash_point'].shift(1)
    df.dropna(inplace=True)
    X = df[['previous_crash']]  # Independent feature
    y = df['crash_point']       # Target feature
    return X, y

# Train the model
def train_model(X, y):
    model = LinearRegression()
    model.fit(X, y)
    return model

# Streamlit app setup
st.title("Aviator Crash Point Predictor")

# Load and prepare data
df = load_data()
X, y = prepare_data(df)
model = train_model(X, y)

# User input for prediction
last_crash = st.number_input("Enter the last crash point:")
if st.button("Predict Next Crash Point"):
    prediction = model.predict(np.array([[last_crash]]))
    st.write(f"Predicted Next Crash Point: {prediction[0]:.2f}")
    pip install pandas scikit-learn streamlit
    streamlit run aviator_predictor.py
